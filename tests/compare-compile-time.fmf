# This test plan compares three versions of LLVM and their compile time:
#
#   1. The PGOed LLVM snapshot living in the daily copr repo:
#      llvm-snapshots-pgo-$YYYYMMDD
#   2. The regular LLVM snapshot also living in another daily copr repo:
#      llvm-snapshots-big-merge-$YYYYMMDD
#   3. The system LLVM living in the regular fedora repository.
#
# NOTE: The comparison happens on the same machine for each chroot to be fair.
#
# We store all comparison results in the test plans artifact directory (see
# `TMT_PLAN_DATA` in
# https://tmt.readthedocs.io/en/stable/overview.html#step-variables). Expect
# these files for each passing plan.
#
#   1. pgo.json
#   2. snapshot.json
#   3. system.json
#   4. pgo_vs_snapshot.compile_time.txt
#   5. pgo_vs_system.compile_time.txt
#   6. snapshot_vs_system.compile_time.txt
#   7. result.csv
#
# In order to run this test plan on testing-farm you need to make a request like
# so:
#
#   $ testing-farm request \
#     --compose Fedora-Rawhide \
#     --git-url https://github.com/kwk/llvm-snapshots \
#     --git-ref compile-time-perf \
#     --arch x86_64 \
#     --plan /tests/compare-compile-time \
#     --context distro=fedora-rawhide \
#     --context arch=x86_64 \
#     --environment COPR_CHROOT=fedora-rawhide-x86_64 \
#     --environment YYYYMMDD=20250317
#
# What's really necessary to pass is the `YYYYMMDD` environment variable in
# order to pick the right copr repos and the `COPR_CHROOT` environment variable
# to ensure that copr repo enablement works as expected.
#
# NOTE: This plan was designed to be flexible enough to re-use it for testing
#       i.e. BOLT performance improvements, once we have a copr repo which
#       enables it.
#
# Docs for this file format: https://tmt.readthedocs.io/en/stable/

summary: LLVM compare compile time
prepare:
  # Lower the priority of the testing-farm-tag-repository so that our copr repo is picked up.
  # See: https://docs.testing-farm.io/Testing%20Farm/0.1/test-environment.html#_tag_repository
  - name: Set testing-farm-tag-repository priority
    how: shell
    script: |
      if dnf repolist | grep -q testing-farm-tag-repository; then
        dnf install -y 'dnf5-command(config-manager)' || dnf install -y 'dnf-command(config-manager)'
        dnf config-manager --save --setopt="testing-farm-tag-repository.priority=999" || \
          dnf config-manager setopt "testing-farm-tag-repository.priority=999"
      fi

  - name: Enable llvm-test-suite repo from copr
    how: shell
    script:
      - dnf install -y 'dnf5-command(copr)' || dnf install -y 'dnf-command(copr)'
      - dnf copr enable -y @fedora-llvm-team/llvm-test-suite $COPR_CHROOT

  - name: "Install all dependencies needed to run the tests"
    how: shell
    order: 99
    script:
      - dnf install -y cmake coreutils envsubst fedora-packager git jq ninja-build python3-lit python3-pandas python3-pip python3-scipy python3-setuptools python3-virtualenv tcl tcl-devel tcl-tclreadline tcl-thread-devel tcl-zlib which

discover:
  how: shell
  tests:
    ################################################################
    # Build and test llvm-test-suite for each build strategy
    ################################################################
    - name: pgo
      test: . $TMT_TREE/scripts/perf/lib.sh && build_test_suite ${TMT_TEST_NAME:1} llvm-snapshots-pgo-$YYYYMMDD

    - name: snapshot
      test: . $TMT_TREE/scripts/perf/lib.sh && build_test_suite ${TMT_TEST_NAME:1} llvm-snapshots-big-merge-$YYYYMMDD

    - name: system
      test: . $TMT_TREE/scripts/perf/lib.sh && build_test_suite ${TMT_TEST_NAME:1}

    ################################################################
    # Compare build strategies
    ################################################################
    - name: pgo snapshot
      test: . $TMT_TREE/scripts/perf/lib.sh && compare_compile_time ${TMT_TEST_NAME:1} show_csv_header

    - name: pgo system
      test: . $TMT_TREE/scripts/perf/lib.sh && compare_compile_time ${TMT_TEST_NAME:1}

    - name: snapshot system
      test: . $TMT_TREE/scripts/perf/lib.sh && compare_compile_time ${TMT_TEST_NAME:1}

execute:
    how: tmt
