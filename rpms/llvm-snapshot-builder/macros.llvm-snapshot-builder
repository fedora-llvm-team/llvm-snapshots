# llvm_sb: LLVM snapshot builder
#
# This file is meant to be used by spec files that want to build LLVM snapshots.
# Put this somewhere in the spec file:
#
#     %{llvm_sb}
#
# Then you'll have access to all kinds of LUA functions with this prefix:
#
#     llvm_sb_
#
# None of the functions will print their results, they'll call each other and
# therefore just return the results except for llvm_sb_echo(). That is used for
# more verbose output without calling print().
#
# Author: Konrad Kleine <kkleine@redhat.com>

%llvm_sb %{lua:
    -- Prints a message that doesn't interfere with RPM the same as print(msg) would.
    function llvm_sb_echo(msg)
        rpm.expand("%{echo:" .. msg .. "}")
    end

    llvm_sb_echo('Enabling LLVM Snapshot builder functions: llvm_sb_xy()')

    -- Returns the URL to the snapshot releases.
    function llvm_sb_url_base()
        return 'https://github.com/kwk/llvm-daily-fedora-rpms/releases/download/source-snapshot'
    end

    -- Returns the URL to the snapshot releases.
    function llvm_sb_url_base()
        return 'https://github.com/kwk/llvm-daily-fedora-rpms/releases/download/source-snapshot'
    end

     -- Returns the base URL concatenated with the given filename
    function llvm_sb_build_url(filename)
        return llvm_sb_url_base() .. '/' .. filename
        -- see https://www.lua.org/pil/3.4.html
        -- alternatively:
        -- return string.format("%s/%s", llvm_sb_url_base(), filename)
    end

    -- Returns the date in reversed form (year month day) that is passed
    -- to the spec with --define "yyyymmdd 20220604". In case no date is
    -- supplied the current date is used.
    -- 
    -- To manually set a date call:
    --     rpmspec -qv --define "yyyymmdd 20220606" package.spec
    function llvm_sb_yyyymmdd()
        if not rpm.isdefined('yyyymmdd') then
            -- see https://www.lua.org/pil/22.1.html
            local d = os.date("%Y%m%d")
            llvm_sb_echo("No date supplied. Using current date: " .. d)
            return d
        end
        local d = rpm.expand('%yyyymmdd')
        llvm_sb_echo("Using manually supplied date: " .. d)
        return d
    end

     -- Returns the contents of filename if it exists or requests it with curl.
    function llvm_sb_curl_file_cached(filename)
        if not posix.access(filename, 'f') then
            local url = llvm_sb_build_url(filename)
            llvm_sb_echo("File not found: " .. filename)
            llvm_sb_echo("Fetching: " .. url)
            rpm.execute('curl', '-sL', '-o', filename, url)
        else
            llvm_sb_echo("File already exists: " .. filename)
        end
        llvm_sb_echo("Reading content of file: " .. filename)
        local f = rpm.open(filename)
        return f:read()
    end

     -- Returns the Major.Minor.Patch version for the date given by llvm_sb_yyyymmdd()
    function llvm_sb_version()
        local filename = "llvm-release-" .. llvm_sb_yyyymmdd() .. ".txt"
        return llvm_sb_curl_file_cached(filename)
    end

     -- Returns the major and minor version as three separate arguments
    function llvm_sb_version_split()
        local version = llvm_sb_version()
        local major, minor, patch = string.match(version, "(%d+)%.(%d+)%.(%d+)")
        return major, minor, patch
    end

     -- Returns just the major version
    function llvm_sb_version_major()
        local major, _, _ = llvm_sb_version_split()
        return major
    end

     -- Returns just the minor version
    function llvm_sb_version_minor()
        local _, minor, _ = llvm_sb_version_split()
        return minor
    end

     -- Returns just the patch version
    function llvm_sb_version_patch()
        local _, _, patch = llvm_sb_version_split()
        return patch
    end

    -- Returns the Git commit sha1 for the date given by llvm_sb_yyyymmdd()
    function llvm_sb_git_revision()
        local filename = "llvm-git-revision-" .. llvm_sb_yyyymmdd() .. ".txt"
        return curl_file_cached(filename)
    end

     -- Returns the short Git commit sha1 for the date given by _yyyymmdd()
    function llvm_sb_git_revision_short()
        local revision = llvm_sb_git_revision()
        return string.sub(revision, 0, 14)
    end

    -- If the snapshot build was triggered with copr, this returns a link to
    -- the build page. If not, an empty string is returned
    function llvm_sb_copr_build_link()
        if rpm.expand("%copr_projectname") ~= "%copr_projectname" then
            return ""
        end
        -- Remove the .copr prefix that is added here infront the build ID
        -- see https://pagure.io/copr/copr/blob/main/f/rpmbuild/mock.cfg.j2#_22-25
        return string.sub(rpm.expand("%buildtag"), 6)
    end

    -- Suffix to add to %Version tag so that the snapshot is clearly marked
    function llvm_sb_version_suffix()
        return "~pre" .. llvm_sb_yyyymmdd() .. ".g" .. llvm_sb_git_revision_short()
    end

    -- Creates a string that 
    function llvm_sb_changelog_entry()
        -- Make sure weekdays are printed in English for Changelog entries.
        assert(os.setlocale('C'))
        local entry = "* "..os.date("%a %b %d %Y").." LLVM snapshot - "..rpm.expand("%version").."\n"..
                      "- This is an automated snapshot build ".."%s".."\n\n"
        local copr_link = llvm_sb_copr_build_link()
        if copr_link ~= "" then
            return string.format(entry, copr_link)
        end
        return string.format(entry, "")
    end

    llvm_sb_echo('Done enabling LLVM Snapshot builder functions: llvm_sb_xy()')
 }