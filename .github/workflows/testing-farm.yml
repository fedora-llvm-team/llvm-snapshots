name: "testing-farm"

on:
  workflow_call:
    inputs:
      yyyymmdd:
        description: 'YYYMMDD (e.g. 20240220)'
        default: 'today'
        required: true
        type: string
      os-version:
        description: 'OS version (e.g. fedora-rawhide-x86_64)'
        default: 'all'
        required: true
        type: string
      strategy:
        description: 'Build strategy'
        default: 'all'
        required: true
        type: string
      force-test:
        description: 'Force re-running test if it already ran'
        default: false
        required: true
        type: boolean
      dry-run:
        description: 'Do not submit request to testing-farm, just print it'
        default: true
        required: true
        type: boolean

  workflow_dispatch:
    inputs:
      yyyymmdd:
        description: 'YYYMMDD (e.g. 20240220)'
        default: 'today'
        required: true
        type: string
      os-version:
        description: 'OS version (e.g. fedora-rawhide-x86_64)'
        default: 'all'
        required: true
        type: string
      strategy:
        description: 'Build strategy'
        default: 'all'
        required: true
        type: choice
        options:
          - all
          - big-merge
          - standalone
          - bootstrap
      force-test:
        description: 'Force re-running test if it already ran'
        default: false
        required: true
        type: boolean
      dry-run:
        description: 'Do not submit request to testing-farm, just print it'
        default: true
        required: true
        type: boolean

permissions:
  # Allow to store artifacts
  actions: write

jobs:
  prepare-next-job-matrix:
    runs-on: ubuntu-latest
    outputs:
      os-versions: ${{ steps.prepare-json-step.outputs.os-versions }}
      strategies: ${{ steps.prepare-json-step.outputs.strategies }}
      strategy-details: ${{ steps.prepare-json-step.outputs.strategy-details }}
    steps:
      - id: prepare-json-step
        run: |
          echo "::group::OS version"
          os_versions=`curl -sL https://copr.fedorainfracloud.org/api_3/mock-chroots/list | jq -rcM '[. | keys[] | select(.|match("(fedora-[0-9]+|rawhide)|rhel-(9|[0-9]{2,})-")) ']`

          # Adapt if we have a custom workflow input
          if [[ "${{ github.event.inputs.os-version }}" != "all" ]]; then
            os_versions="[\"${{ github.event.inputs.os-version }}\"]"
          fi
          echo "os-versions=$os_versions" >> $GITHUB_OUTPUT

          echo "OS versions:           $os_versions"

          echo "::endgroup::"

          echo "::group::Strategies"
          strategies=(big-merge standalone bootstrap)

          if [[ "${{ github.event.inputs.strategy }}" != "all" ]]; then
            strategies=(${{ github.event.inputs.strategy }})
          fi

          # Convert strategies from bash array to json
          strategies_json=`jq -c -n '$ARGS.positional' --args "${strategies[@]}"`
          echo "strategies=$strategies_json" >> $GITHUB_OUTPUT

          echo "Strategies:            $strategies"
          echo "Strategies JSON:       $strategies_json"

          echo "::endgroup::"

          echo "::group::Strategy details"
          declare -A strategy_details
          strategy_details["standalone"]="llvm-snapshots-incubator-YYYYMMDD"
          strategy_details["big-merge"]="llvm-snapshots-big-merge-YYYYMMDD"
          strategy_details["bootstrap"]="llvm-snapshots-bootstrap-YYYYMMDD"

          if [[ "${{ github.event.inputs.strategy }}" != "all" ]]; then
            tmp_copr_project_tpl=${strategy_details[${{ github.event.inputs.strategy }}]}
            unset strategy_details
            declare -A strategy_details
            strategy_details["${{ github.event.inputs.strategy }}"]=$tmp_copr_project_tpl
          fi

          echo "Strategy Details:      ${strategy_details[@]}"

          # Transform associative bash array into JSON we can consume in the next job
          strategy_details_json="["
          for key in ${!strategy_details[@]}
          do
            strategy_details_json+="{'strategy': '${key}', 'copr_project_tpl': '${strategy_details[${key}]}'},"
          done
          strategy_details_json+="]"
          echo "Strategy Details JSON: $strategy_details_json"
          echo "strategy-details=$strategy_details_json" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  run-testing-farm:
    needs: prepare-next-job-matrix
    name: run
    strategy:
      fail-fast: false
      matrix:
        os-version: ${{ fromJSON(needs.prepare-next-job-matrix.outputs.os-versions) }}
        strategy: ${{ fromJSON(needs.prepare-next-job-matrix.outputs.strategies) }}
        include: ${{ fromJSON(needs.prepare-next-job-matrix.outputs.strategy-details) }}
    runs-on: ubuntu-latest
    # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    timeout-minutes: 360
    steps:

      - uses: actions/checkout@v4

      - uses: ./.github/actions/prepare-python

      - name: "Variables and functions"
        shell: bash -e {0}
        run: |
          yyyymmdd=`date +%Y%m%d`
          # TODO(kwk): Determine date some other way...
          if [[ "${{ github.event.inputs.yyyymmdd }}" != "today" ]]; then
            yyyymmdd=${{ github.event.inputs.yyyymmdd }}
          fi

          username=@fedora-llvm-team
          echo "username=$username" >> $GITHUB_ENV
          echo "yyyymmdd=$yyyymmdd" >> $GITHUB_ENV
          echo "copr_project=${{ matrix.copr_project_tpl }}" | sed "s/YYYYMMDD/$yyyymmdd/" >> $GITHUB_ENV

          # Create the artifact file that we use to identify if the test already
          # ran
          artifact_name="testing-farm-${{ matrix.os-version }}-${{ matrix.strategy }}-$yyyymmdd"
          echo "artifact_name=$artifact_name" >> $GITHUB_ENV
          touch /tmp/$artifact_name
          skip=0
          ./scripts/workflow-artifact-exists.py \
            --token ${{ secrets.GITHUB_TOKEN }} \
            --project ${{ github.repository }} \
            --workflow-name ${{ github.workflow }} \
            --artifact-name $artifact_name \
          && skip=1

          [[ ${{ github.event.inputs.force-test }} ]] && skip=0

          echo "skip=$skip" >> $GITHUB_ENV

          [[ ${{ github.event.inputs.dry-run }} ]] && dry_run=1 || dry_run=0

          echo "dry_run=$dry_run" >> $GITHUB_ENV

      - name: Create artifact for this testing-farm run if not already done
        if: env.skip == 0 && env.dry_run != 1
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: /tmp/${{ env.artifact_name }}
          if-no-files-found: warn

      - name: "Run testing-farm"
        if: env.skip == 0
        shell: bash -e {0}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TESTING_FARM_API_TOKEN_PUBLIC_RANCH: ${{ secrets.TESTING_FARM_API_TOKEN_PUBLIC_RANCH }}
          TESTING_FARM_API_TOKEN_REDHAT_RANCH: ${{ secrets.TESTING_FARM_API_TOKEN_REDHAT_RANCH }}
          # TODO(kwk): Add token for testing farm
        run: |
          # Pick the right API key depending on the OS and architecture
          # RHEL and some architectures can only be tested internally.

          echo ${{ matrix.os-version }} | grep -P '(x86_64|aarch64)$' > /dev/null && ranch=public
          echo ${{ matrix.os-version }} | grep -P '(^rhel|(ppc64le|s390x|i386)$)' > /dev/null && ranch=redhat

          [[ "$ranch" == "public" ]] && export TESTING_FARM_API_TOKEN=${{ env.TESTING_FARM_API_TOKEN_PUBLIC_RANCH }}
          [[ "$ranch" == "redhat" ]] && export TESTING_FARM_API_TOKEN=${{ env.TESTING_FARM_API_TOKEN_REDHAT_RANCH }}

          name=`echo ${{ matrix.os-version }} | grep -oP "^[^-]+"`
          arch=`echo ${{ matrix.os-version }} | grep -oP "[^-]+$"`
          version=`echo ${{ matrix.os-version }} | grep -oP "^[^-]+-\K[^-]+"`

          echo "::group::Pre testing-farm info"
          echo "name    = $name"
          echo "arch    = $arch"
          echo "version = $version"
          echo "ranch   = $ranch"
          echo "dry_run = $dry_run"
          echo "::endgroup::"

          [[ "$dry_run" == "1" ]] && dry_run_option=--dry-run

          echo "::group::testing-farm request"
          testing-farm \
            request \
              --compose ${name^}-${version^} \
              --git-url https://github.com/fedora-llvm-team/llvm-snapshots \
              --arch $arch \
              --plan /tests/snapshot-gating \
              --environment COPR_PROJECT=$copr_project \
              --context distro=${name}-${version} \
              --context arch=${arch} $dry_run_option \
              --context snapshot=$yyyymmdd
          echo "::endgroup::"

          # Don't be fooled, we currently need the repetition of arch and alike
          # in the --context variables.
